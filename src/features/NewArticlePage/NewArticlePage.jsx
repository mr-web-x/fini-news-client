"use client";

import { useState, useEffect, useRef } from "react";
import { useRouter, useSearchParams } from "next/navigation";
import { createArticle, getArticleById, updateArticle } from "@/actions/articles.actions";
import { getAllCategories } from "@/actions/categories.actions";
import { Editor } from '@tinymce/tinymce-react';
import "./NewArticlePage.scss";

const NewArticlePage = ({ user, articleId: propsArticleId }) => {
    const router = useRouter();
    const searchParams = useSearchParams();
    const editorRef = useRef(null);

    // ‚úÖ –ù–û–í–û–ï: –ø–æ–ª—É—á–∞–µ–º articleId –ª–∏–±–æ –∏–∑ –ø—Ä–æ–ø—Å–æ–≤, –ª–∏–±–æ –∏–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    const queryArticleId = searchParams.get('id');
    const articleId = propsArticleId || queryArticleId;
    const isEditMode = !!articleId;

    const [formData, setFormData] = useState({
        title: '',
        excerpt: '',
        content: '',
        category: '',
        tags: ''
    });

    const [loading, setLoading] = useState(false);
    const [loadingArticle, setLoadingArticle] = useState(false);
    const [message, setMessage] = useState({ type: '', text: '' });

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    const [categories, setCategories] = useState([]);
    const [loadingCategories, setLoadingCategories] = useState(true);

    // ‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    useEffect(() => {
        loadCategories();
    }, []);

    // ‚úÖ –ù–û–í–û–ï: –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç—å–∏ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å articleId)
    useEffect(() => {
        if (articleId) {
            loadArticle(articleId);
        }
    }, [articleId]);

    const loadCategories = async () => {
        setLoadingCategories(true);
        try {
            const result = await getAllCategories();

            if (result.success) {
                let categoriesData = [];

                if (Array.isArray(result.data)) {
                    categoriesData = result.data;
                } else if (result.data?.data && Array.isArray(result.data.data)) {
                    categoriesData = result.data.data;
                } else if (result.data?.categories && Array.isArray(result.data.categories)) {
                    categoriesData = result.data.categories;
                }

                setCategories(categoriesData);
                console.log('Loaded categories:', categoriesData);
            } else {
                console.error('Error loading categories:', result.message);
                setCategories([]);
            }
        } catch (error) {
            console.error('Error loading categories:', error);
            setCategories([]);
        } finally {
            setLoadingCategories(false);
        }
    };

    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç—å–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤
    const loadArticle = async (id) => {
        setLoadingArticle(true);
        try {
            const result = await getArticleById(id);

            if (!result.success) {
                setMessage({ type: 'error', text: result.message || '–°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
                // –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Å—Ç–∞—Ç–µ–π
                setTimeout(() => {
                    router.push('/profil/moje-clanky');
                }, 2000);
                return;
            }

            const article = result.data;

            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ–º
            // article.author –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–∏–±–æ –æ–±—ä–µ–∫—Ç–æ–º —Å _id, –ª–∏–±–æ —Å—Ç—Ä–æ–∫–æ–π
            const authorId = article.author?.id || article.author;
            const userId = user.id;

            // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏ (–≤–∞–∂–Ω–æ –¥–ª—è MongoDB ObjectId)
            const isAuthor = String(authorId) === String(userId);
            const isAdmin = user.role === 'admin';

            console.log('üîç [NewArticlePage] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞:', {
                articleId: id,
                authorId: String(authorId),
                userId: String(userId),
                isAuthor,
                isAdmin,
                userRole: user.role
            });

            if (!isAuthor && !isAdmin) {
                setMessage({ type: 'error', text: 'Nem√°te opr√°vnenie upravova≈• tento ƒçl√°nok' });
                setTimeout(() => {
                    router.push('/profil/moje-clanky');
                }, 2000);
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å—Ç–∞—Ç—å–∏
            if (article.status === 'published') {
                setMessage({ type: 'error', text: 'Publikovan√© ƒçl√°nky nie je mo≈æn√© upravova≈•' });
                setTimeout(() => {
                    router.push('/profil/moje-clanky');
                }, 2000);
                return;
            }

            if (article.status === 'pending' && !isAdmin) {
                setMessage({ type: 'error', text: 'ƒål√°nok je na moder√°cii. Poƒçkajte na rozhodnutie administr√°tora.' });
                setTimeout(() => {
                    router.push('/profil/moje-clanky');
                }, 2000);
                return;
            }

            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏ —Å—Ç–∞—Ç—å–∏
            setFormData({
                title: article.title || '',
                excerpt: article.excerpt || '',
                content: article.content || '',
                category: article.category?._id || '',
                tags: article.tags?.join(', ') || ''
            });

            console.log('‚úÖ [NewArticlePage] –°—Ç–∞—Ç—å—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');

        } catch (error) {
            console.error('‚ùå [NewArticlePage] Error loading article:', error);
            setMessage({ type: 'error', text: 'Chyba pri naƒç√≠tavan√≠ ƒçl√°nku' });
        } finally {
            setLoadingArticle(false);
        }
    };

    const handleInputChange = (e) => {
        const { name, value } = e.target;
        setFormData(prev => ({
            ...prev,
            [name]: value
        }));
    };

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ TinyMCE
    const handleEditorChange = (content) => {
        setFormData(prev => ({
            ...prev,
            content: content
        }));
    };

    const handleSave = async (submitForReview = false) => {
        setMessage({ type: '', text: '' });

        // –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
        if (!formData.title.trim()) {
            setMessage({ type: 'error', text: 'Nadpis ƒçl√°nku je povinn√Ω' });
            return;
        }

        if (!formData.excerpt.trim()) {
            setMessage({ type: 'error', text: 'Perex je povinn√Ω' });
            return;
        }

        if (formData.excerpt.trim().length < 150) {
            setMessage({ type: 'error', text: 'Perex mus√≠ obsahova≈• minim√°lne 150 znakov' });
            return;
        }

        if (!formData.content.trim()) {
            setMessage({ type: 'error', text: 'Obsah ƒçl√°nku je povinn√Ω' });
            return;
        }

        if (formData.content.trim().length < 500) {
            setMessage({ type: 'error', text: 'Obsah mus√≠ obsahova≈• minim√°lne 500 znakov' });
            return;
        }

        if (!formData.category) {
            setMessage({ type: 'error', text: 'Kateg√≥ria je povinn√°' });
            return;
        }

        setLoading(true);

        try {
            const articleData = {
                title: formData.title.trim(),
                excerpt: formData.excerpt.trim(),
                content: formData.content.trim(),
                category: formData.category,
                tags: formData.tags
                    .split(',')
                    .map(tag => tag.trim())
                    .filter(tag => tag.length > 0)
            };

            let result;

            // ‚úÖ –ù–û–í–û–ï: –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏
            if (isEditMode) {
                console.log('üîµ [NewArticlePage] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—å–∏:', { articleId, articleData });
                result = await updateArticle(articleId, articleData);
            } else {
                result = await createArticle(articleData);
            }

            if (result.success) {
                const savedArticle = result.data;

                setMessage({
                    type: 'success',
                    text: isEditMode
                        ? 'ƒål√°nok bol √∫spe≈°ne upraven√Ω'
                        : 'ƒål√°nok bol √∫spe≈°ne vytvoren√Ω ako koncept'
                });

                // ‚úÖ –ù–û–í–û–ï: –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è - —Ä–µ–¥–∏—Ä–µ–∫—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–µ–π—Å—Ç–≤–∏—è
                if (submitForReview) {
                    // –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é - —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π
                    setTimeout(() => {
                        router.push('/profil/moje-clanky');
                    }, 1000);
                } else if (isEditMode) {
                    // ‚úÖ –ù–û–í–û–ï: –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º - —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä (–í–∞—Ä–∏–∞–Ω—Ç –ë)
                    setTimeout(() => {
                        router.push(`/profil/moje-clanky/${savedArticle._id}/ukazka`);
                    }, 1000);
                } else {
                    // –ï—Å–ª–∏ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Å—Ç–∞—Ç—å—é - –æ–±–Ω–æ–≤–ª—è–µ–º URL —Å articleId
                    router.push(`/profil/novy-clanok?id=${savedArticle._id}`);
                }
            } else {
                setMessage({
                    type: 'error',
                    text: result.message || 'Chyba pri ukladan√≠ ƒçl√°nku'
                });
            }
        } catch (error) {
            console.error('‚ùå [NewArticlePage] Error saving article:', error);
            setMessage({
                type: 'error',
                text: 'Neoƒçak√°van√° chyba. Sk√∫ste to znova.'
            });
        } finally {
            setLoading(false);
        }
    };

    // ‚úÖ –ù–û–í–û–ï: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É "N√°hƒæad"
    const handlePreview = () => {
        if (articleId) {
            router.push(`/profil/moje-clanky/${articleId}/ukazka`);
        }
    };

    // –ü–æ–¥—Å—á–µ—Ç —Å–∏–º–≤–æ–ª–æ–≤
    const getCharacterCount = (text, max) => {
        const count = text.length;
        const remaining = max - count;
        return {
            count,
            remaining,
            className: remaining < 0 ? 'character-count--error' :
                remaining < 20 ? 'character-count--warning' :
                    'character-count--normal'
        };
    };

    const titleCount = getCharacterCount(formData.title, 200);
    const excerptCount = getCharacterCount(formData.excerpt, 320);
    const contentCount = getCharacterCount(formData.content, 10000);

    // ‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É, –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è —Å—Ç–∞—Ç—å—è
    if (loadingArticle) {
        return (
            <div className="new-article-page">
                <div className="new-article__header">
                    <h1>Naƒç√≠tavam ƒçl√°nok...</h1>
                </div>
                <div className="new-article__content">
                    <div className="new-article__loading">
                        <div className="spinner"></div>
                        <p>Naƒç√≠tavam...</p>
                    </div>
                </div>
            </div>
        );
    }

    return (
        <div className="new-article-page">
            <div className="new-article__header">
                <h1>{isEditMode ? 'Upravi≈• ƒçl√°nok' : 'Nov√Ω ƒçl√°nok'}</h1>
                <p>
                    {isEditMode
                        ? 'Upravte svoj ƒçl√°nok a ulo≈æte zmeny'
                        : 'Vytvorte nov√Ω ƒçl√°nok a po≈°lite ho na moder√°ciu'}
                </p>
            </div>

            <div className="new-article__content">
                {/* Message */}
                {message.text && (
                    <div className={`new-article__message new-article__message--${message.type}`}>
                        {message.text}
                    </div>
                )}

                <form className="new-article__form">
                    {/* Title */}
                    <div className="new-article__form-group">
                        <label htmlFor="title" className="new-article__label">
                            Nadpis ƒçl√°nku *
                        </label>
                        <input
                            type="text"
                            id="title"
                            name="title"
                            value={formData.title}
                            onChange={handleInputChange}
                            className="new-article__input"
                            placeholder="Zadajte nadpis ƒçl√°nku..."
                            maxLength={200}
                            disabled={loading}
                        />
                        <div className={`character-count ${titleCount.className}`}>
                            {titleCount.count} / 200 znakov
                            {titleCount.remaining < 0 && ` (${Math.abs(titleCount.remaining)} pr√≠li≈° veƒæa)`}
                        </div>
                    </div>

                    {/* Category */}
                    <div className="new-article__form-group">
                        <label htmlFor="category" className="new-article__label">
                            Kateg√≥ria *
                        </label>
                        <select
                            id="category"
                            name="category"
                            value={formData.category}
                            onChange={handleInputChange}
                            className="new-article__select"
                            disabled={loading || loadingCategories}
                        >
                            <option value="">-- Vyberte kateg√≥riu --</option>
                            {categories.map(cat => (
                                <option key={cat._id} value={cat._id}>
                                    {cat.name}
                                </option>
                            ))}
                        </select>
                    </div>

                    {/* Excerpt */}
                    <div className="new-article__form-group">
                        <label htmlFor="excerpt" className="new-article__label">
                            Perex (kr√°tky popis) *
                        </label>
                        <textarea
                            id="excerpt"
                            name="excerpt"
                            value={formData.excerpt}
                            onChange={handleInputChange}
                            className="new-article__textarea"
                            placeholder="Zadajte kr√°tky popis ƒçl√°nku (min. 150 znakov)..."
                            rows={4}
                            maxLength={320}
                            disabled={loading}
                        />
                        <div className={`character-count ${excerptCount.className}`}>
                            {excerptCount.count} / 320 znakov
                            {excerptCount.remaining < 0 && ` (${Math.abs(excerptCount.remaining)} pr√≠li≈° veƒæa)`}
                            {excerptCount.count < 150 && ` (e≈°te ${150 - excerptCount.count} znakov do minima)`}
                        </div>
                    </div>

                    {/* Content Editor */}
                    <div className="new-article__form-group">
                        <label htmlFor="content" className="new-article__label">
                            Obsah ƒçl√°nku *
                        </label>
                        <Editor
                            apiKey={process.env.NEXT_PUBLIC_TINYMCE}
                            onInit={(evt, editor) => editorRef.current = editor}
                            value={formData.content}
                            onEditorChange={handleEditorChange}
                            init={{
                                height: 500,
                                menubar: true,
                                plugins: [
                                    'advlist', 'autolink', 'lists', 'link', 'image', 'charmap', 'preview',
                                    'anchor', 'searchreplace', 'visualblocks', 'code', 'fullscreen',
                                    'insertdatetime', 'media', 'table', 'code', 'help', 'wordcount'
                                ],
                                toolbar: 'undo redo | blocks | ' +
                                    'bold italic forecolor | alignleft aligncenter ' +
                                    'alignright alignjustify | bullist numlist outdent indent | ' +
                                    'removeformat | help',
                                content_style: 'body { font-family:Helvetica,Arial,sans-serif; font-size:14px }'
                            }}
                            disabled={loading}
                        />
                        <div className={`character-count ${contentCount.className}`}>
                            {contentCount.count} / 10000 znakov
                            {contentCount.count < 500 && ` (e≈°te ${500 - contentCount.count} znakov do minima)`}
                        </div>
                    </div>

                    {/* Tags */}
                    <div className="new-article__form-group">
                        <label htmlFor="tags" className="new-article__label">
                            Tagy (oddelen√© ƒçiarkou)
                        </label>
                        <input
                            type="text"
                            id="tags"
                            name="tags"
                            value={formData.tags}
                            onChange={handleInputChange}
                            className="new-article__input"
                            placeholder="napr: technol√≥gie, inov√°cie, AI"
                            disabled={loading}
                        />
                        <small className="new-article__hint">
                            Zadajte tagy oddelen√© ƒçiarkou (max. 5 tagov)
                        </small>
                    </div>

                    {/* Action Buttons */}
                    <div className="new-article__actions">
                        <button
                            type="button"
                            className="new-article__btn new-article__btn--secondary"
                            onClick={() => router.push('/profil/moje-clanky')}
                            disabled={loading}
                        >
                            Zru≈°i≈•
                        </button>

                        {/* ‚úÖ –ù–û–í–û–ï: –ö–Ω–æ–ø–∫–∞ "N√°hƒæad" - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç–∞—Ç—å—è —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ */}
                        {isEditMode && (
                            <button
                                type="button"
                                className="new-article__btn new-article__btn--preview"
                                onClick={handlePreview}
                                disabled={loading}
                            >
                                üëÅÔ∏è N√°hƒæad
                            </button>
                        )}

                        <button
                            type="button"
                            className="new-article__btn new-article__btn--draft"
                            onClick={() => handleSave(false)}
                            disabled={loading}
                        >
                            {loading ? 'Ukladanie...' : isEditMode ? 'Ulo≈æi≈• zmeny' : 'Ulo≈æi≈• ako koncept'}
                        </button>

                        <button
                            type="button"
                            className="new-article__btn new-article__btn--primary"
                            onClick={() => handleSave(true)}
                            disabled={loading}
                        >
                            {loading ? 'Odosiela sa...' : 'Odosla≈• na moder√°ciu'}
                        </button>
                    </div>

                </form>
            </div>
        </div>
    );
};

export default NewArticlePage;