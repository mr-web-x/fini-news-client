"use server";

import { cookies } from 'next/headers';
import articlesService from '@/services/articles.service';

/**
 * –ü–æ–ª—É—á–∏—Ç—å JWT —Ç–æ–∫–µ–Ω –∏–∑ cookies
 * @returns {string|null} - JWT —Ç–æ–∫–µ–Ω –∏–ª–∏ null
 */
async function getAuthToken() {
    const cookieStore = await cookies();
    const token = cookieStore.get('auth_token');
    return token?.value || null;
}

// ========================================
// –ü–£–ë–õ–ò–ß–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
// ========================================

/**
 * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏
 * @param {Object} filters - –§–∏–ª—å—Ç—Ä—ã (category, tags, page, limit, sort)
 * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –¥–∞–Ω–Ω—ã–º–∏
 */
export async function getAllArticles(filters = {}) {
    try {
        const articles = await articlesService.getAllArticles(filters);
        return {
            success: true,
            data: articles
        };
    } catch (error) {
        console.error('[Server Action] getAllArticles error:', error);
        return {
            success: false,
            message: error.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–µ–π'
        };
    }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—å—é –ø–æ slug
 * @param {string} slug - Slug —Å—Ç–∞—Ç—å–∏
 * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
export async function getArticleBySlug(slug) {
    try {
        if (!slug) {
            return {
                success: false,
                message: 'Slug –Ω–µ —É–∫–∞–∑–∞–Ω'
            };
        }

        const article = await articlesService.getArticleBySlug(slug);
        return {
            success: true,
            data: article
        };
    } catch (error) {
        console.error('[Server Action] getArticleBySlug error:', error);
        return {
            success: false,
            message: error.message || '–°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
        };
    }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—å—é –ø–æ ID
 * @param {string} id - ID —Å—Ç–∞—Ç—å–∏
 * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
export async function getArticleById(id) {
    try {
        if (!id) {
            return {
                success: false,
                message: 'ID –Ω–µ —É–∫–∞–∑–∞–Ω'
            };
        }

        const article = await articlesService.getArticleById(id);
        return {
            success: true,
            data: article
        };
    } catch (error) {
        console.error('[Server Action] getArticleById error:', error);
        return {
            success: false,
            message: error.message || '–°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
        };
    }
}

/**
 * –ü–æ–∏—Å–∫ —Å—Ç–∞—Ç–µ–π
 * @param {string} query - –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
 * @param {Object} filters - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
 * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞
 */
export async function searchArticles(query, filters = {}) {
    try {
        if (!query || query.trim().length < 2) {
            return {
                success: false,
                message: '–ó–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞'
            };
        }

        const results = await articlesService.searchArticles(query, filters);
        return {
            success: true,
            data: results
        };
    } catch (error) {
        console.error('[Server Action] searchArticles error:', error);
        return {
            success: false,
            message: error.message || '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞'
        };
    }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å—Ç–∞—Ç—å–∏
 * @param {number} limit - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–µ–π
 * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
export async function getPopularArticles(limit = 10) {
    try {
        const articles = await articlesService.getPopularArticles(limit);
        return {
            success: true,
            data: articles
        };
    } catch (error) {
        console.error('[Server Action] getPopularArticles error:', error);
        return {
            success: false,
            message: error.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π'
        };
    }
}

/**
 * –£–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ —Å—Ç–∞—Ç—å–∏
 * @param {string} id - ID —Å—Ç–∞—Ç—å–∏
 * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
export async function incrementArticleViews(id) {
    try {
        if (!id) {
            return {
                success: false,
                message: 'ID —Å—Ç–∞—Ç—å–∏ –Ω–µ —É–∫–∞–∑–∞–Ω'
            };
        }

        await articlesService.incrementViews(id);
        return {
            success: true,
            message: '–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—Å—á–∏—Ç–∞–Ω'
        };
    } catch (error) {
        console.error('[Server Action] incrementArticleViews error:', error);
        return {
            success: false,
            message: error.message || '–û—à–∏–±–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤'
        };
    }
}

// ========================================
// –ü–†–ò–í–ê–¢–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø (author/admin)
// ========================================

/**
 * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å—Ç–∞—Ç—å—é
 * @param {Object} data - –î–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –∏–∑ —Ñ–æ—Ä–º—ã
 * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
export async function createArticle(data) {
    try {
        const token = await getAuthToken();

        if (!token) {
            return {
                success: false,
                message: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'
            };
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π (–ë–ï–ó SLUG!)
        if (!data.title || data.title.trim().length < 10) {
            return {
                success: false,
                message: '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤'
            };
        }

        if (!data.excerpt || data.excerpt.trim().length < 150) {
            return {
                success: false,
                message: '–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 150 —Å–∏–º–≤–æ–ª–æ–≤'
            };
        }

        if (!data.content || data.content.trim().length < 500) {
            return {
                success: false,
                message: '–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç–∞—Ç—å–∏ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤'
            };
        }

        if (!data.category) {
            return {
                success: false,
                message: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞'
            };
        }

        const article = await articlesService.createArticle(data, token);

        return {
            success: true,
            data: article,
            message: '–°—Ç–∞—Ç—å—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞'
        };
    } catch (error) {
        console.error('[Server Action] createArticle error:', error);
        return {
            success: false,
            message: error.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞—Ç—å–∏'
        };
    }
}

/**
 * –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—å—é
 * @param {string} id - ID —Å—Ç–∞—Ç—å–∏
 * @param {Object} data - –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
 * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
export async function updateArticle(id, data) {
    try {
        const token = await getAuthToken();

        // ‚úÖ –î–û–ë–ê–í–¨ –õ–û–ì–ò–†–û–í–ê–ù–ò–ï:
        console.log('üü¢ [Server Action] updateArticle –≤—ã–∑–≤–∞–Ω:', {
            id,
            hasToken: !!token,
            dataKeys: Object.keys(data)
        });

        if (!token) {
            return {
                success: false,
                message: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'
            };
        }

        if (!id) {
            return {
                success: false,
                message: 'ID —Å—Ç–∞—Ç—å–∏ –Ω–µ —É–∫–∞–∑–∞–Ω'
            };
        }

        const article = await articlesService.updateArticle(id, data, token);

        // ‚úÖ –î–û–ë–ê–í–¨ –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –û–¢–í–ï–¢–ê:
        console.log('üü¢ [Server Action] updateArticle —É—Å–ø–µ—à–Ω–æ:', article._id);

        return {
            success: true,
            data: article,
            message: '–°—Ç–∞—Ç—å—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞'
        };
    } catch (error) {
        // ‚úÖ –î–û–ë–ê–í–¨ –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –û–®–ò–ë–ö–ò:
        console.error('‚ùå [Server Action] updateArticle error:', {
            message: error.message,
            stack: error.stack
        });
        return {
            success: false,
            message: error.message || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—å–∏'
        };
    }
}

/**
 * –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ç—å—é
 * @param {string} id - ID —Å—Ç–∞—Ç—å–∏
 * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
export async function deleteArticle(id) {
    try {
        const token = await getAuthToken();

        if (!token) {
            return {
                success: false,
                message: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'
            };
        }

        if (!id) {
            return {
                success: false,
                message: 'ID —Å—Ç–∞—Ç—å–∏ –Ω–µ —É–∫–∞–∑–∞–Ω'
            };
        }

        await articlesService.deleteArticle(id, token);

        return {
            success: true,
            message: '–°—Ç–∞—Ç—å—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞'
        };
    } catch (error) {
        console.error('[Server Action] deleteArticle error:', error);
        return {
            success: false,
            message: error.message || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—å–∏'
        };
    }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—å—é –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
 * @param {string} id - ID —Å—Ç–∞—Ç—å–∏
 * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
export async function submitArticleForReview(id) {
    try {
        const token = await getAuthToken();

        if (!token) {
            return {
                success: false,
                message: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'
            };
        }

        if (!id) {
            return {
                success: false,
                message: 'ID —Å—Ç–∞—Ç—å–∏ –Ω–µ —É–∫–∞–∑–∞–Ω'
            };
        }

        const article = await articlesService.submitForReview(id, token);

        return {
            success: true,
            data: article,
            message: '–°—Ç–∞—Ç—å—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é'
        };
    } catch (error) {
        console.error('[Server Action] submitArticleForReview error:', error);
        return {
            success: false,
            message: error.message || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é'
        };
    }
}

export async function getMyArticles(status = 'all') {
    try {
        const token = await getAuthToken();

        if (!token) {
            return {
                success: false,
                message: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'
            };
        }

        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º getMyArticles –≤–º–µ—Å—Ç–æ getUserArticles
        const articles = await articlesService.getMyArticles(status, token);

        return {
            success: true,
            data: articles
        };
    } catch (error) {
        console.error('[Server Action] getMyArticles error:', error);
        return {
            success: false,
            message: error.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–µ–π'
        };
    }
}

// ========================================
// –î–ï–ô–°–¢–í–ò–Ø –î–õ–Ø –ê–î–ú–ò–ù–ê
// ========================================

/**
 * –û–¥–æ–±—Ä–∏—Ç—å —Å—Ç–∞—Ç—å—é (admin)
 * @param {string} id - ID —Å—Ç–∞—Ç—å–∏
 * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
export async function approveArticle(id) {
    try {
        const token = await getAuthToken();

        if (!token) {
            return {
                success: false,
                message: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'
            };
        }

        if (!id) {
            return {
                success: false,
                message: 'ID —Å—Ç–∞—Ç—å–∏ –Ω–µ —É–∫–∞–∑–∞–Ω'
            };
        }

        const article = await articlesService.approveArticle(id, token);

        return {
            success: true,
            data: article,
            message: '–°—Ç–∞—Ç—å—è –æ–¥–æ–±—Ä–µ–Ω–∞ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞'
        };
    } catch (error) {
        console.error('[Server Action] approveArticle error:', error);
        return {
            success: false,
            message: error.message || '–û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è —Å—Ç–∞—Ç—å–∏'
        };
    }
}

/**
 * –û—Ç–∫–ª–æ–Ω–∏—Ç—å —Å—Ç–∞—Ç—å—é (admin)
 * @param {string} id - ID —Å—Ç–∞—Ç—å–∏
 * @param {string} reason - –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
 * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
export async function rejectArticle(id, reason) {
    try {
        const token = await getAuthToken();

        if (!token) {
            return {
                success: false,
                message: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'
            };
        }

        if (!id) {
            return {
                success: false,
                message: 'ID —Å—Ç–∞—Ç—å–∏ –Ω–µ —É–∫–∞–∑–∞–Ω'
            };
        }

        const article = await articlesService.rejectArticle(id, reason, token);

        return {
            success: true,
            data: article,
            message: '–°—Ç–∞—Ç—å—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞'
        };
    } catch (error) {
        console.error('[Server Action] rejectArticle error:', error);
        return {
            success: false,
            message: error.message || '–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—å–∏'
        };
    }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—å–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ (admin)
 * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
export async function getPendingArticles() {
    try {
        const token = await getAuthToken();

        if (!token) {
            return {
                success: false,
                message: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'
            };
        }

        const articles = await articlesService.getPendingArticles(token);

        return {
            success: true,
            data: articles
        };
    } catch (error) {
        console.error('[Server Action] getPendingArticles error:', error);
        return {
            success: false,
            message: error.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–µ–π –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏'
        };
    }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å—Ç–∞—Ç—å–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞ (—Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏)
 * @param {Object} filters - –§–∏–ª—å—Ç—Ä—ã
 * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
export async function getAllArticlesForAdmin(filters = {}) {
    try {
        const token = await getAuthToken();

        if (!token) {
            return {
                success: false,
                message: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'
            };
        }

        const result = await articlesService.getAllArticlesForAdmin(filters, token);

        return {
            success: true,
            data: result
        };
    } catch (error) {
        console.error('[Server Action] getAllArticlesForAdmin error:', error);
        return {
            success: false,
            message: error.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–µ–π'
        };
    }
}