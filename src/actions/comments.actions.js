"use server";

import { cookies } from 'next/headers';
import commentsService from '@/services/comments.service';

/**
 * –ü–æ–ª—É—á–∏—Ç—å JWT —Ç–æ–∫–µ–Ω –∏–∑ cookies
 * @returns {string|null} - JWT —Ç–æ–∫–µ–Ω –∏–ª–∏ null
 */
async function getAuthToken() {
    const cookieStore = await cookies();
    const token = cookieStore.get('auth_token');
    return token?.value || null;
}

// ========================================
// –ü–£–ë–õ–ò–ß–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
// ========================================

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —Å—Ç–∞—Ç—å–µ
 * @param {string} articleId - ID —Å—Ç–∞—Ç—å–∏
 * @param {Object} options - –û–ø—Ü–∏–∏ (page, limit, sort)
 * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
export async function getArticleComments(articleId, options = {}) {
    try {
        if (!articleId) {
            return {
                success: false,
                message: 'ID ƒçl√°nku nie je zadan√©'
            };
        }

        const comments = await commentsService.getArticleComments(articleId, options);
        return {
            success: true,
            data: comments
        };
    } catch (error) {
        console.error('[Server Action] getArticleComments error:', error);
        return {
            success: false,
            message: error.message || 'Chyba pri naƒç√≠tavan√≠ koment√°rov'
        };
    }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ —Å—Ç–∞—Ç—å–µ
 * @param {string} articleId - ID —Å—Ç–∞—Ç—å–∏
 * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
export async function getCommentsCount(articleId) {
    try {
        if (!articleId) {
            return {
                success: false,
                message: 'ID ƒçl√°nku nie je zadan√©'
            };
        }

        const count = await commentsService.getCommentsCount(articleId);
        return {
            success: true,
            data: { count }
        };
    } catch (error) {
        console.error('[Server Action] getCommentsCount error:', error);
        return {
            success: false,
            message: error.message || 'Chyba pri poƒç√≠tan√≠ koment√°rov'
        };
    }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ ID
 * @param {string} id - ID –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
 * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
export async function getCommentById(id) {
    try {
        if (!id) {
            return {
                success: false,
                message: 'ID koment√°ra nie je zadan√©'
            };
        }

        const comment = await commentsService.getCommentById(id);
        return {
            success: true,
            data: comment
        };
    } catch (error) {
        console.error('[Server Action] getCommentById error:', error);
        return {
            success: false,
            message: error.message || 'Koment√°r nen√°jden√Ω'
        };
    }
}

// ========================================
// –ü–†–ò–í–ê–¢–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø (–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏)
// ========================================

/**
 * ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è createComment
 * 
 * –ò–ó–ú–ï–ù–ï–ù–ò–Ø:
 * 1. –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –û–ë–™–ï–ö–¢ data –≤–º–µ—Å—Ç–æ –¥–≤—É—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
 * 2. –ò–∑–≤–ª–µ–∫–∞–µ—Ç article –∏ content –∏–∑ –æ–±—ä–µ–∫—Ç–∞
 * 3. –î–æ–±–∞–≤–ª–µ–Ω—ã –ª–æ–≥–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
 */
export async function createComment(data) {
    try {
        console.log('üîç [createComment] Received data:', data);

        const token = await getAuthToken();

        if (!token) {
            return {
                success: false,
                message: 'Nie ste prihl√°sen√Ω'
            };
        }

        // ‚úÖ –ò–∑–≤–ª–µ–∫–∞–µ–º article –∏ content –∏–∑ –æ–±—ä–µ–∫—Ç–∞ data
        const { article: articleId, content } = data;

        if (!articleId) {
            console.log('‚ùå [createComment] Missing articleId');
            return {
                success: false,
                message: 'ID ƒçl√°nku nie je zadan√©'
            };
        }

        if (!content || typeof content !== 'string') {
            console.log('‚ùå [createComment] Invalid content:', content);
            return {
                success: false,
                message: 'Koment√°r je povinn√Ω'
            };
        }

        const trimmedContent = content.trim();
        console.log('üîç [createComment] Trimmed content length:', trimmedContent.length);

        if (trimmedContent.length < 3) {
            console.log('‚ùå [createComment] Content too short:', trimmedContent.length);
            return {
                success: false,
                message: 'Koment√°r mus√≠ obsahova≈• minim√°lne 3 znaky'
            };
        }

        if (trimmedContent.length > 2000) {
            console.log('‚ùå [createComment] Content too long:', trimmedContent.length);
            return {
                success: false,
                message: 'Koment√°r nesmie presiahnu≈• 2000 znakov'
            };
        }

        const commentData = {
            article: articleId,
            content: trimmedContent
        };

        console.log('‚úÖ [createComment] Sending to backend:', commentData);

        const comment = await commentsService.createComment(commentData, token);

        console.log('‚úÖ [createComment] Success! Comment created:', comment._id);

        return {
            success: true,
            data: comment,
            message: 'Koment√°r bol √∫spe≈°ne pridan√Ω'
        };
    } catch (error) {
        console.error('‚ùå [createComment] Error:', error);
        return {
            success: false,
            message: error.message || 'Chyba pri vytv√°ran√≠ koment√°ra'
        };
    }
}

/**
 * –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
 * @param {string} id - ID –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
 * @param {string} content - –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
 * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
export async function updateComment(id, content) {
    try {
        const token = await getAuthToken();

        if (!token) {
            return {
                success: false,
                message: 'Nie ste prihl√°sen√Ω'
            };
        }

        if (!id) {
            return {
                success: false,
                message: 'ID koment√°ra nie je zadan√©'
            };
        }

        if (!content || content.trim().length < 3) {
            return {
                success: false,
                message: 'Koment√°r mus√≠ obsahova≈• minim√°lne 3 znaky'
            };
        }

        if (content.trim().length > 1000) {
            return {
                success: false,
                message: 'Koment√°r nesmie presiahnu≈• 1000 znakov'
            };
        }

        const commentData = {
            content: content.trim()
        };

        const comment = await commentsService.updateComment(id, commentData, token);

        return {
            success: true,
            data: comment,
            message: 'Koment√°r bol √∫spe≈°ne upraven√Ω'
        };
    } catch (error) {
        console.error('[Server Action] updateComment error:', error);
        return {
            success: false,
            message: error.message || 'Chyba pri √∫prave koment√°ra'
        };
    }
}

/**
 * –£–¥–∞–ª–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
 * @param {string} id - ID –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
 * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
export async function deleteComment(id) {
    try {
        const token = await getAuthToken();

        if (!token) {
            return {
                success: false,
                message: 'Nie ste prihl√°sen√Ω'
            };
        }

        if (!id) {
            return {
                success: false,
                message: 'ID koment√°ra nie je zadan√©'
            };
        }

        await commentsService.deleteComment(id, token);

        return {
            success: true,
            message: 'Koment√°r bol vymazan√Ω'
        };
    } catch (error) {
        console.error('[Server Action] deleteComment error:', error);
        return {
            success: false,
            message: error.message || 'Chyba pri mazan√≠ koment√°ra'
        };
    }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {Object} options - –û–ø—Ü–∏–∏ (page, limit)
 * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
export async function getUserComments(userId, options = {}) {
    try {
        const token = await getAuthToken();

        if (!token) {
            return {
                success: false,
                message: 'Nie ste prihl√°sen√Ω'
            };
        }

        if (!userId) {
            return {
                success: false,
                message: 'ID pou≈æ√≠vateƒæa nie je zadan√©'
            };
        }

        const comments = await commentsService.getUserComments(userId, options, token);

        return {
            success: true,
            data: comments
        };
    } catch (error) {
        console.error('[Server Action] getUserComments error:', error);
        return {
            success: false,
            message: error.message || 'Chyba pri naƒç√≠tavan√≠ koment√°rov pou≈æ√≠vateƒæa'
        };
    }
}

// ========================================
// –î–ï–ô–°–¢–í–ò–Ø –î–õ–Ø –ê–î–ú–ò–ù–ê
// ========================================

/**
 * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ (admin)
 * @param {Object} filters - –§–∏–ª—å—Ç—Ä—ã (page, limit, sort, article, author)
 * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
export async function getAllCommentsForAdmin(filters = {}) {
    try {
        const token = await getAuthToken();

        if (!token) {
            return {
                success: false,
                message: 'Nie ste prihl√°sen√Ω'
            };
        }

        const comments = await commentsService.getAllComments(filters, token);

        return {
            success: true,
            data: comments
        };
    } catch (error) {
        console.error('[Server Action] getAllCommentsForAdmin error:', error);
        return {
            success: false,
            message: error.message || 'Chyba pri naƒç√≠tavan√≠ koment√°rov'
        };
    }
}

/**
 * –ú–æ–¥–µ—Ä–∞—Ü–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è - —É–¥–∞–ª–µ–Ω–∏–µ (admin)
 * @param {string} id - ID –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
 * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
export async function moderateComment(id) {
    try {
        const token = await getAuthToken();

        if (!token) {
            return {
                success: false,
                message: 'Nie ste prihl√°sen√Ω'
            };
        }

        if (!id) {
            return {
                success: false,
                message: 'ID koment√°ra nie je zadan√©'
            };
        }

        await commentsService.moderateComment(id, token);

        return {
            success: true,
            message: 'Koment√°r bol vymazan√Ω moder√°torom'
        };
    } catch (error) {
        console.error('[Server Action] moderateComment error:', error);
        return {
            success: false,
            message: error.message || 'Chyba pri moder√°cii koment√°ra'
        };
    }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –º–æ–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (—Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
 * @param {Object} options - –û–ø—Ü–∏–∏ (page, limit)
 * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
export async function getMyComments(options = {}) {
    try {
        const token = await getAuthToken();

        if (!token) {
            return {
                success: false,
                message: 'Nie ste prihl√°sen√Ω'
            };
        }

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º 'me' –∫–∞–∫ userId - backend —Å–∞–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É
        const comments = await commentsService.getUserComments('me', options, token);

        return {
            success: true,
            data: comments
        };
    } catch (error) {
        console.error('[Server Action] getMyComments error:', error);
        return {
            success: false,
            message: error.message || 'Chyba pri naƒç√≠tavan√≠ va≈°ich koment√°rov'
        };
    }
}